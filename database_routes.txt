# SureSight Database Routes and Access Patterns

## User Management
1. Get User Profile
   ```
   supabase.from('users').select('*').eq('auth_user_id', authId).single()
   ```

2. Get Complete User Profile (with role-specific data)
   ```
   supabase.rpc('get_complete_user_profile', { p_user_id: userId })
   ```

3. Update User Profile
   ```
   supabase.rpc('update_user_profile', { profileData })
   ```

## Property Management
1. Create Property
   ```
   supabase.rpc('create_property', {
     p_homeowner_profile_id: homeownerId,
     p_address_line1: address,
     p_city: city,
     p_state: state,
     p_postal_code: postalCode,
     p_address_line2: addressLine2,
     p_country: country,
     p_property_type: propertyType,
     p_year_built: yearBuilt,
     p_square_footage: squareFootage
   })
   ```

2. Get Homeowner Properties
   ```
   supabase.from('properties')
     .select('*')
     .eq('homeowner_id', homeownerId)
     .order('created_at', { ascending: false })
   ```

## Report Management
1. Create Report
   ```
   supabase.rpc('create_report', {
     p_property_id: propertyId,
     p_creator_id: creatorId,
     p_title: title,
     p_description: description,
     p_incident_date: incidentDate
   })
   ```

2. Get Report with Related Data
   ```
   supabase.from('reports')
     .select(`
       *,
       property:property_id(*),
       creator:creator_id(*),
       assessment_areas(*),
       images(*)
     `)
     .eq('id', reportId)
     .single()
   ```

3. Update Report
   ```
   supabase.from('reports')
     .update(updateData)
     .eq('id', reportId)
   ```

## Collaboration Management
1. Add Report Collaborator
   ```
   supabase.from('report_collaborators').insert({
     report_id: reportId,
     user_id: userId,
     role_type: roleType,  // 'homeowner', 'contractor', 'adjuster', 'viewer'
     permission_level: permissionLevel,  // 'viewer', 'editor', 'manager'
     invited_by: currentUserId,
     invitation_status: 'pending',
     invitation_email: email
   })
   ```

2. Get Report Collaborators
   ```
   supabase.from('report_collaborators')
     .select(`
       *,
       user:user_id(*)
     `)
     .eq('report_id', reportId)
   ```

3. Update Invitation Status
   ```
   supabase.from('report_collaborators')
     .update({ invitation_status: status })
     .eq('id', collaborationId)
   ```

## Contractor Management
1. Request Contractor
   ```
   supabase.from('contractor_requests').insert({
     report_id: reportId,
     requested_by: currentUserId,
     response_deadline: deadline,
     notes: notes,
     status: 'open'
   })
   ```

2. Find Available Contractors
   ```
   supabase.rpc('find_available_contractors', {
     p_report_id: reportId,
     p_limit: 10,
     p_min_rating: 4.0
   })
   ```

3. Assign Contractor to Request
   ```
   supabase.rpc('assign_contractor_to_report', {
     p_request_id: requestId,
     p_contractor_id: contractorId
   })
   ```

4. Get Contractor Requests
   ```
   supabase.from('contractor_requests')
     .select(`
       *,
       report:report_id(*),
       contractor:contractor_id(*)
     `)
     .eq('status', status)
   ```

## Assessment Areas
1. Add Assessment Area
   ```
   supabase.rpc('add_assessment_area', {
     p_report_id: reportId,
     p_damage_type: damageType,
     p_location: location,
     p_severity: severity,
     p_added_by: addedBy,
     p_dimensions: dimensions,
     p_notes: notes
   })
   ```

2. Get Assessment Areas for Report
   ```
   supabase.from('assessment_areas')
     .select('*')
     .eq('report_id', reportId)
   ```

## Image Management
1. Upload Image
   ```
   supabase.storage
     .from('property-images')
     .upload(path, file)
   ```

2. Get Image Public URL
   ```
   supabase.storage
     .from('property-images')
     .getPublicUrl(path)
   ```

3. Get Image Analysis
   ```
   supabase.from('image_analysis')
     .select('*')
     .eq('image_id', imageId)
     .single()
   ```

## Messaging System
1. Send Message
   ```
   supabase.from('messages')
     .insert({
       sender_id: senderId,
       receiver_id: receiverId,
       content: content,
       message_type: 'text',  // 'text', 'image', 'document', 'notification'
       report_id: reportId,   // optional context
       property_id: propertyId // optional context
     })
   ```

2. Get User Messages
   ```
   supabase.from('messages')
     .select('*')
     .eq('receiver_id', userId)
     .eq('is_read', false) // Optional for unread only
     .order('created_at', { ascending: false })
   ```

3. Get Conversation Messages
   ```
   supabase.from('messages')
     .select('*')
     .eq('conversation_id', conversationId)
     .order('created_at', { ascending: true })
   ```

4. Mark Messages as Read
   ```
   supabase.rpc('mark_messages_as_read', {
     p_message_ids: messageIds
   })
   ```

5. Count Unread Messages
   ```
   supabase.rpc('count_unread_messages', {
     p_user_id: userId
   })
   ```

## Data Types

### User Roles
- homeowner
- contractor
- adjuster
- admin

### Report Status
- draft
- submitted
- in_review
- approved
- rejected

### Damage Types
- roof
- siding
- window
- structural
- water
- other

### Damage Severity
- minor
- moderate
- severe
- critical

### Contact Methods
- email
- phone
- sms

### Permission Levels
- viewer
- editor
- manager

### Invitation Status
- pending
- accepted
- declined

### Contractor Request Status
- open
- assigned
- completed
- cancelled

### Message Types
- text
- image
- document
- notification

## Database Relationships

### Table Relationships (Foreign Keys)

| Table               | Column               | References             | Referenced Column |
|---------------------|----------------------|------------------------|-------------------|
| activities          | report_id            | reports                | id                |
| activities          | user_id              | users                  | id                |
| adjuster_profiles   | id                   | profiles               | id                |
| assessment_areas    | report_id            | reports                | id                |
| comments            | parent_id            | comments               | id                |
| comments            | report_id            | reports                | id                |
| comments            | user_id              | users                  | id                |
| contractor_profiles | id                   | profiles               | id                |
| contractor_requests | contractor_id        | contractor_profiles    | id                |
| contractor_requests | report_id            | reports                | id                |
| contractor_requests | requested_by         | users                  | id                |
| estimate_items      | estimate_id          | estimates              | id                |
| estimates           | contractor_id        | contractor_profiles    | id                |
| estimates           | report_id            | reports                | id                |
| homeowner_profiles  | id                   | profiles               | id                |
| image_analysis      | assessment_area_id   | assessment_areas       | id                |
| image_analysis      | image_id             | images                 | id                |
| image_analysis      | report_id            | reports                | id                |
| images              | assessment_area_id   | assessment_areas       | id                |
| images              | report_id            | reports                | id                |
| images              | uploaded_by          | users                  | id                |
| messages            | receiver_id          | users                  | id                |
| messages            | sender_id            | users                  | id                |
| messages            | report_id            | reports                | id                |
| messages            | property_id          | properties             | id                |
| notifications       | user_id              | users                  | id                |
| profiles            | user_id              | users                  | id                |
| properties          | homeowner_id         | homeowner_profiles     | id                |
| report_collaborators| invited_by           | users                  | id                |
| report_collaborators| report_id            | reports                | id                |
| report_collaborators| user_id              | users                  | id                |
| reports             | adjuster_id          | adjuster_profiles      | id                |
| reports             | contractor_id        | contractor_profiles    | id                |
| reports             | creator_id           | users                  | id                |
| reports             | property_id          | properties             | id                |

### Relationship Paths

1. User to Properties:
   ```
   users → profiles → homeowner_profiles → properties
   ```

2. User to Reports (as homeowner):
   ```
   users → profiles → homeowner_profiles → properties → reports
   ```

3. User to Reports (as creator):
   ```
   users → reports (via creator_id)
   ```

4. User to Reports (as contractor):
   ```
   users → profiles → contractor_profiles → reports (via contractor_id)
   ```

5. User to Reports (as adjuster):
   ```
   users → profiles → adjuster_profiles → reports (via adjuster_id)
   ```

6. User to Reports (as collaborator):
   ```
   users → report_collaborators → reports
   ```

7. Report to Images:
   ```
   reports → images (via report_id)
   reports → assessment_areas → images
   ```

8. Property to Assessment Areas:
   ```
   properties → reports → assessment_areas
   ```
   
9. Image Analysis Relationships:
   ```
   images → image_analysis
   reports → image_analysis
   assessment_areas → image_analysis
   ```

10. Contractor Request Flow:
    ```
    reports → contractor_requests → contractor_profiles
    ```

11. Message Context Relationships:
    ```
    users → messages → users
    messages → reports
    messages → properties
    ```

## New Tables from Migrations

### Report Collaborators
For managing user collaborations on reports with different permission levels.
- Key fields: report_id, user_id, role_type, permission_level, invitation_status
- Enables collaborators to have viewer, editor, or manager access to reports

### Contractor Requests
For managing contractor assignment requests for reports.
- Key fields: report_id, requested_by, contractor_id, status, response_deadline
- Tracks open requests, assignments, and completions

### Enhanced Contractor Profiles
Added fields to support contractor discovery and matching:
- service_areas (array): Geographical areas served
- specialties (array): Types of work performed
- availability_status: 'available', 'busy', 'unavailable'
- rating and rating_count: For contractor quality metrics
- search_radius: How far the contractor is willing to travel
- last_active: Timestamp to track contractor activity

### Enhanced Messages
Added context fields to support richer messaging:
- report_id: Link to related report
- property_id: Link to related property
- message_type: Text, image, document, or notification
- conversation_id: For grouping messages between the same users

## SQL Query Examples

### Get all properties owned by a user
```sql
SELECT p.* FROM properties p
JOIN homeowner_profiles hp ON p.homeowner_id = hp.id
JOIN profiles pf ON hp.id = pf.id
JOIN users u ON pf.user_id = u.id
WHERE u.id = [USER_ID]
```

### Get all reports a user has access to (including collaborations)
```sql
SELECT r.* FROM reports r
WHERE 
  r.creator_id = [USER_ID] -- As creator
  OR
  EXISTS (  -- As homeowner
    SELECT 1 FROM properties p
    JOIN homeowner_profiles hp ON p.homeowner_id = hp.id
    JOIN profiles pf ON hp.id = pf.id
    WHERE r.property_id = p.id AND pf.user_id = [USER_ID]
  )
  OR
  EXISTS (  -- As contractor
    SELECT 1 FROM contractor_profiles cp
    JOIN profiles pf ON cp.id = pf.id
    WHERE r.contractor_id = cp.id AND pf.user_id = [USER_ID]
  )
  OR
  EXISTS (  -- As adjuster
    SELECT 1 FROM adjuster_profiles ap
    JOIN profiles pf ON ap.id = pf.id
    WHERE r.adjuster_id = ap.id AND pf.user_id = [USER_ID]
  )
  OR
  EXISTS (  -- As collaborator
    SELECT 1 FROM report_collaborators rc 
    WHERE rc.report_id = r.id 
    AND rc.user_id = [USER_ID]
    AND rc.invitation_status = 'accepted'
  )
```

### Get conversation messages between two users
```sql
SELECT m.* FROM messages m
WHERE m.conversation_id = (
  SELECT generate_conversation_id([USER_ID_1], [USER_ID_2])
)
ORDER BY m.created_at ASC
```

### Find suitable contractors for a report
```sql
SELECT 
  cp.*,
  calculate_contractor_match_score(cp.id, [REPORT_ID]) AS match_score
FROM contractor_profiles cp
WHERE 
  cp.availability_status = 'available'
  AND cp.rating >= 4
ORDER BY match_score DESC
LIMIT 10
```

### Get reports where a user is collaborating
```sql
SELECT r.* FROM reports r
JOIN report_collaborators rc ON r.id = rc.report_id
WHERE rc.user_id = [USER_ID]
  AND rc.invitation_status = 'accepted'
ORDER BY r.updated_at DESC
```

### Get all messages related to a specific report
```sql
SELECT m.*, 
  sender.first_name || ' ' || sender.last_name AS sender_name,
  receiver.first_name || ' ' || receiver.last_name AS receiver_name
FROM messages m
JOIN users sender ON m.sender_id = sender.id
JOIN users receiver ON m.receiver_id = receiver.id
WHERE m.report_id = [REPORT_ID]
ORDER BY m.created_at ASC
```

## Row Level Security (RLS) Policies
- Users can only view and edit their own profile information
- Homeowners can only see properties they own
- Contractors can only see reports assigned to them
- Adjusters can only see reports within their territories
- Admin users have access to all data
- Report collaborators can access reports based on their permission level
- Image analysis results are only visible to users who can access the related report
- Messages are visible to senders, receivers, and users with context access